from pyexpat.errors import messages

import conf
import telebot
import re
from uuid import uuid4
from telebot import types

bot = telebot.TeleBot(conf.TOKEN)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/about" '
    )


@bot.message_handler(commands=['help'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        """/start - –Ω–∞–∂–º–∏—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç,
    /about - –Ω–∞–∂–º–∏—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ, 
    /calc - –Ω–∞–∂–º–∏—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"""
    )


@bot.message_handler(commands=['about'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å –≤–∞–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è. "
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/help'."
    )


@bot.message_handler(commands=['calc'])
def text(message):
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:"
    )
    bot.register_next_step_handler(msg, after_text)


def after_text(message):
    expr = message.text.replace(" ", "").replace(",", ".")

    if not re.match(r'^[\d+\-*/().^‚àö]+$', expr):
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã + - * / ^ ‚àö ( )")
        return

    try:
        expr = expr.replace("^", "**").replace("‚àö", "math.sqrt")

        result = eval(f"__import__('math').{expr}" if "sqrt" in expr else expr)

        bot.reply_to(message,
                     f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {message.text} = {round(result, 4) if isinstance(result, float) else result}")

    except ZeroDivisionError:
        bot.reply_to(message, "‚õî –û—à–∏–±–∫–∞: –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(e)}")


@bot.message_handler(func=lambda m: True, content_types=['photo'])
def get_broadcast_picture(message):
    file_path = bot.get_file(message.photo[0].file_id).file_path
    file = bot.download_file(file_path)
    with open("expression.png", "wb") as code:
        code.write(file)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    bot.send_message(message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"
                     )


bot.polling(none_stop=True)
