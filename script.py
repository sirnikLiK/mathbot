from pyexpat.errors import messages

import math
import conf
import telebot
import re
from uuid import uuid4
from telebot import types

import latex_ocr

import sys

sys.set_int_max_str_digits(0)

import sympy as sp
from sympy import *

bot = telebot.TeleBot(conf.TOKEN)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/about" '
    )


@bot.message_handler(commands=['help'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        """
        /start - –Ω–∞–∂–º–∏—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç\n/about - –Ω–∞–∂–º–∏—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n/calc - –Ω–∞–∂–º–∏—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ\n/equat - –Ω–∞–∂–º–∏—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ\n/log - –Ω–∞–∂–º–∏—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã—á–∏—Å–ª–∏—Ç—å –ª–æ–≥–∞—Ä–∏—Ñ–º
        """
    )


@bot.message_handler(commands=['about'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å –≤–∞–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è. "
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/help'."
    )


@bot.message_handler(commands=['log'])
def log_text(message):
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ log(n, base) base - –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞—Ä–∏—Ñ–º–∞:"
    )
    bot.register_next_step_handler(msg, log_new)


def log_new(message):
    expr = message.text
    result = eval(f"__import__('math').{expr}")
    try:
        bot.reply_to(message, f'üî¢–†–µ—à–µ–Ω–∏–µ: {result}')
    except Exception as e:
        bot.reply_to(message,
                     f'‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∞—Ä–∏—Ñ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: log(n, base), log10(n), log2(n)')


@bot.message_handler(commands=['calc'])
def text(message):
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:"
    )
    bot.register_next_step_handler(msg, after_text)


def after_text(message):
    expr = message.text.replace(" ", "").replace(",", ".")

    if not re.match(r"^[\d+\-*/().^‚àö]*$", expr):
        print([expr])
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã + - * / ^ ( )")
        return

    try:
        expr = expr.replace("^", "**").replace("‚àö", "math.sqrt")

        result = eval(f"__import__('math').{expr}" if "sqrt" in expr else expr)

        bot.reply_to(message,
                     f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {message.text} = {round(result, 4) if isinstance(result, float) else result}")

    except ZeroDivisionError:
        bot.reply_to(message, "‚õîÔ∏è –û—à–∏–±–∫–∞: –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(e)}")


def solve_equation(equation):
    x = sp.symbols('x')
    lhs, rhs = equation.split('=')
    lhs = sp.sympify(lhs)
    rhs = sp.sympify(rhs)
    solution = sp.solve(lhs - rhs, cubics=False)
    return solution


@bot.message_handler(commands=['equat'])
def the_equatation_message(message):
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ª–µ–≤–∞—è_—á–∞—Å—Ç—å = –ø—Ä–∞–≤–∞—è_—á–∞—Å—Ç—å' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2*x + 3 = 7'):"
    )
    bot.register_next_step_handler(msg, the_equatation)


def the_equatation(message):
    equation = message.text
    try:
        solution = solve_equation(equation)
        bot.reply_to(message, f'üî¢–†–µ—à–µ–Ω–∏–µ: {', '.join(map(str, solution))}')
    except Exception as e:
        bot.reply_to(message,
                     f'‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ª–µ–≤–∞—è_—á–∞—Å—Ç—å = –ø—Ä–∞–≤–∞—è_—á–∞—Å—Ç—å" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2*x + 3 = 7")')




@bot.message_handler(func=lambda message: True)
def handle_message(message):
    bot.send_message(message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"
                     )


bot.polling(none_stop=True)
